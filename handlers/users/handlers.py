import asyncio

from aiogram.dispatcher.storage import FSMContext
from utils.db.lib import check_valid_tron_address
from states.user_states import AddWallet

from aiogram.types.message import ParseMode
from six import text_type
from handlers.users.keyboards import main_kb, prize_main_kb
from utils.db.database import DBCommands
from aiogram import types
from load_all import dp
from aiogram.dispatcher.filters.builtin import ChatTypeFilter, Text
from aiogram.utils.markdown import escape_md

db = DBCommands()

@dp.message_handler(ChatTypeFilter('private'), commands=["start"])
async def start(message: types.Message):
    await db.get_user(message.from_user)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —á–∞—Ç–∞ @ek_cryptogallery_chat", reply_markup=await main_kb())

@dp.message_handler(ChatTypeFilter('private'), Text(equals="üìà –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"))
async def get_rating(message: types.Message):
    user_data = await db.get_user(message.from_user)
    if user_data:
        msg = f"–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {user_data.get('reputation', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n–û—Ç–¥–∞–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {user_data.get('rep_given', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤ –æ—Ç–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è: {user_data.get('rep_limit', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
        await message.answer(msg)
    else:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


# Code for Prize Handling
@dp.message_handler(ChatTypeFilter('private'), Text(equals="üéÅ –†–æ–∑—ã–≥—Ä—ã—à! üéÅ"))
async def participate_in_airdrop(message: types.Message):
    prize = (await db.get_settings())['prize']
    subscribed = await db.check_user_subscribed(message.from_user.id)
    participating = await db.user_participating(message.from_user.id)
    wallet_added = not (await db.get_user_by_id(message.from_user.id))['address'] == None
    main_msg = ("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç *[EK Cryptogallery](https://t.me/edkhan_cryptogallery)*\!\n\n"
                f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏–∑ *{escape_md(prize)}* USDT\.")
    await message.answer(main_msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=await prize_main_kb(subscribed, participating, wallet_added))

@dp.callback_query_handler(ChatTypeFilter('private'), text="prize_rules")
async def prize_rules(call: types.CallbackQuery):
    await call.answer()
    main_msg = ("–ü—Ä–∞–≤–∏–ª–∞:\n\n"
                "*1Ô∏è‚É£* –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–¥–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ *[—á–∞—Ç](https://t.me/ek_cryptogallery_chat)* –∏ *[–∫–∞–Ω–∞–ª](https://t.me/edkhan_cryptogallery)*\!\n\n"
                "*2Ô∏è‚É£* –ï—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ —Ä–µ—Å—É—Ä—Å, —Ç–æ –æ–Ω –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\.\n\n"
                "*3Ô∏è‚É£* –†–∞–∑ –≤ —Å—É—Ç–∫–∏ \(–≤ 20\.00 –ø–æ –ú—Å–∫\) –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å\.\n\n"
                "*4Ô∏è‚É£* –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑ –Ω–∞–¥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ USDT TRC20\.\n\n"
                "*5Ô∏è‚É£* –ï—Å–ª–∏ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑\.\n\n"
                "*6Ô∏è‚É£* –£–±–µ–¥–∏—Å—å —á—Ç–æ –∫–æ—à–µ–ª—ë–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏ –Ω–µ –∑–∞–±—É–¥—å —á—Ç–æ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑\!"
    )
    await call.message.edit_text(main_msg, parse_mode=ParseMode.MARKDOWN_V2)

@dp.callback_query_handler(ChatTypeFilter('private'), text="participate")
async def participate_action(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
    await call.message.delete()
    await db.user_participate(call.from_user.id)

@dp.callback_query_handler(ChatTypeFilter('private'), text="check_subscribed")
async def check_subscriptions_action(call: types.CallbackQuery):
    subscribed = await db.check_user_subscribed(call.from_user.id)
    if subscribed:
        await call.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!', show_alert=True)
    else:
        await call.answer('–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!', show_alert=True)
    user = await types.User.get_current()
    participating = await db.user_participating(user.id)
    wallet_added = not (await db.get_user_by_id(user.id))['address'] == None
    await call.message.edit_reply_markup(await prize_main_kb(subscribed, participating, wallet_added))

@dp.callback_query_handler(ChatTypeFilter('private'), text="already_participating")
async def already_participating(call: types.CallbackQuery):
    await call.answer("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å!", show_alert=True)
    await call.message.delete()

@dp.callback_query_handler(ChatTypeFilter('private'), text="add_wallet")
async def add_wallet(call: types.CallbackQuery):
    await call.answer()
    msg = "–ü—Ä–∏–∑—ã –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ USDT —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Ç–∏ TRC20, –ø–æ—ç—Ç–æ–º—É –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TRC20 —Ç–æ–∫–µ–Ω—ã."
    await call.message.edit_text(msg)
    await AddWallet.Confirm.set()

@dp.message_handler(ChatTypeFilter('private'), state=AddWallet.Confirm)
async def confirm_wallet(message: types.Message, state: FSMContext):
    wallet = message.text.strip()
    if not check_valid_tron_address(wallet):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await db.add_tron_wallet(message.from_user.id, wallet)
    await state.reset_state()
    await participate_in_airdrop(message)