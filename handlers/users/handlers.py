from aiogram.dispatcher.storage import FSMContext
from utils.db.lib import check_valid_tron_address
from states.user_states import AddWallet

from aiogram.types.message import ParseMode
from handlers.users.keyboards import main_kb, prize_main_kb
from utils.db.database import DBCommands
from aiogram import types
from load_all import dp
from aiogram.dispatcher.filters.builtin import ChatTypeFilter, Text
from aiogram.utils.markdown import escape_md

db = DBCommands()

@dp.message_handler(ChatTypeFilter('private'), commands=["start"])
async def start(message: types.Message):
    await db.get_user(message.from_user)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —á–∞—Ç–∞ @ek_cryptogallery_chat", reply_markup=await main_kb())

@dp.message_handler(ChatTypeFilter('private'), Text(equals="üìà –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥ üìà"))
async def get_rating(message: types.Message):
    user_data = await db.get_user(message.from_user)
    if user_data:
        msg = f"–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {user_data.get('reputation', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n–û—Ç–¥–∞–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {user_data.get('rep_given', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤ –æ—Ç–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è: {user_data.get('rep_limit', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
        await message.answer(msg)
    else:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


# Handler for info
@dp.message_handler(ChatTypeFilter('private'), Text(equals="‚Ñπ –£—Å–ª–æ–≤–∏—è ‚Ñπ"))
async def get_terms(message: types.Message):
    msg_main = escape_md("–ü–æ–ª—É—á–∞–π –∏ –æ—Ç–¥–∞–≤–∞–π –±–∞–ª–ª—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –æ–±—â–µ–Ω–∏–µ –≤ –ß–∞—Ç–µ!\n"
    "–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ß–∞—Ç–∞ –¥–∞—ë—Ç—Å—è 3 –±–∞–ª–ª–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ ‚Äì —á—Ç–æ–±—ã –æ—Ç–¥–∞—Ç—å –∏—Ö –¥—Ä—É–≥–∏–º))\n"
    "–ë–∞–ª–ª–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É (–∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã –∏–ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–µ–±—è –Ω–µ–ª—å–∑—è). –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–Ω–∞—á–æ–∫ ¬´+¬ª. –°–∏—Å—Ç–µ–º–∞ —É–¥–∞–ª–∏—Ç —Ç–≤–æ–π –ø–ª—é—Å–∏–∫ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, —Ä–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–≤—ã—Å–∏—Ç—Å—è –Ω–∞ +1 –±–∞–ª–ª.\n"
    "–ü–æ—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º—ã—Å–ª–∏, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞, —á—É–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º ‚Äì –≤—Å—ë, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –ù–∞—Ä–æ–¥—É, –ß–∞—Ç—É –∏ –û—Ç–µ—á–µ—Å—Ç–≤—É))\n\n\n"
    "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n")
    msg_footer = escape_md("–ó–∞ —Å–ø–∞–º, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏ –†–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ—á–∏–µ –Ω–µ–ø–æ—Ç—Ä–µ–±—Å—Ç–≤–∞ ‚Äì –±–∞–Ω ( —ç—Ç–∏ –≤–µ—â–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã, –Ω–æ –Ω–µ –Ω–µ—Å—É—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑—ã)).")
    prizes = await db.get_prizes()
    msg_prizes = "".join(map(lambda p: f"*{p['goal']}\.* " + escape_md(p["prize_name"]) + "\n", prizes))
    msg = msg_main + msg_prizes + "\n\n" + msg_footer
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN_V2)


# Handler for links
@dp.message_handler(ChatTypeFilter('private'), Text(equals="üîó –°—Å—ã–ª–∫–∏ üîó"))
async def get_links(message: types.Message):
    msg_main = ("–ù–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—ë —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å @Ed\_Khan\n\n"
    "*1\.*  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ \(–∞—É–¥–∏—Ç\) —Ä—É—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:\n"
    "*2\.*  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ \(–∞—É–¥–∏—Ç\) –±–æ—Ç–æ–≤:\n"
    "*3\.*  Twitter: \n"
    "*4\.*  TradingView: \n"
    "*5\.*  –ë–ª–æ–≥:")
    await message.answer(msg_main, parse_mode=ParseMode.MARKDOWN_V2)


# Code for Prize Handling
@dp.message_handler(ChatTypeFilter('private'), Text(equals="üéÅ –†–æ–∑—ã–≥—Ä—ã—à! üéÅ"))
async def participate_in_airdrop(message: types.Message):
    prize = (await db.get_settings())['prize']
    subscribed = await db.check_user_subscribed(message.from_user.id)
    participating = await db.user_participating(message.from_user.id)
    wallet = (await db.get_user_by_id(message.from_user.id))['address']
    wallet_added = not wallet == None
    main_msg = ("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç *[EK Cryptogallery](https://t.me/edkhan_cryptogallery)*\!\n\n"
                f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏–∑ *{escape_md(prize)}* USDT\.\n\n"
                f"–ê–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: *{wallet if wallet_added else '–Ω–µ —É–∫–∞–∑–∞–Ω'}*")
    await message.answer(main_msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=await prize_main_kb(subscribed, participating, wallet_added))

@dp.callback_query_handler(ChatTypeFilter('private'), text="prize_rules")
async def prize_rules(call: types.CallbackQuery):
    await call.answer()
    main_msg = ("–ü—Ä–∞–≤–∏–ª–∞:\n\n"
                "*1Ô∏è‚É£* –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–¥–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ *[—á–∞—Ç](https://t.me/ek_cryptogallery_chat)* –∏ *[–∫–∞–Ω–∞–ª](https://t.me/edkhan_cryptogallery)*\!\n\n"
                "*2Ô∏è‚É£* –ï—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ —Ä–µ—Å—É—Ä—Å, —Ç–æ –æ–Ω –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\.\n\n"
                "*3Ô∏è‚É£* –†–∞–∑ –≤ —Å—É—Ç–∫–∏ \(–≤ 20\.00 –ø–æ –ú—Å–∫\) –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å\.\n\n"
                "*4Ô∏è‚É£* –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑ –Ω–∞–¥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ USDT TRC20\.\n\n"
                "*5Ô∏è‚É£* –ï—Å–ª–∏ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑\.\n\n"
                "*6Ô∏è‚É£* –£–±–µ–¥–∏—Å—å —á—Ç–æ –∫–æ—à–µ–ª—ë–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏ –Ω–µ –∑–∞–±—É–¥—å —á—Ç–æ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑\!"
    )
    await call.message.edit_text(main_msg, parse_mode=ParseMode.MARKDOWN_V2)

@dp.callback_query_handler(ChatTypeFilter('private'), text="participate")
async def participate_action(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
    await call.message.delete()
    await db.user_participate(call.from_user.id)

@dp.callback_query_handler(ChatTypeFilter('private'), text="check_subscribed")
async def check_subscriptions_action(call: types.CallbackQuery):
    subscribed = await db.check_user_subscribed(call.from_user.id)
    if subscribed:
        await call.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!', show_alert=True)
    else:
        await call.answer('–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!', show_alert=True)
    user = await types.User.get_current()
    participating = await db.user_participating(user.id)
    wallet_added = not (await db.get_user_by_id(user.id))['address'] == None
    await call.message.edit_reply_markup(await prize_main_kb(subscribed, participating, wallet_added))

@dp.callback_query_handler(ChatTypeFilter('private'), text="already_participating")
async def already_participating(call: types.CallbackQuery):
    await call.answer("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å!", show_alert=True)
    await call.message.delete()

@dp.callback_query_handler(ChatTypeFilter('private'), text="add_wallet")
async def add_wallet(call: types.CallbackQuery):
    await call.answer()
    msg = "–ü—Ä–∏–∑—ã –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ USDT —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Ç–∏ TRC20, –ø–æ—ç—Ç–æ–º—É –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TRC20 —Ç–æ–∫–µ–Ω—ã."
    await call.message.edit_text(msg)
    await AddWallet.Confirm.set()

@dp.message_handler(ChatTypeFilter('private'), state=AddWallet.Confirm)
async def confirm_wallet(message: types.Message, state: FSMContext):
    wallet = message.text.strip()
    if not check_valid_tron_address(wallet):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await db.add_tron_wallet(message.from_user.id, wallet)
    await state.reset_state()
    await participate_in_airdrop(message)