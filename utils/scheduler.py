
from keyboards.admins.admins_kb import to_bot_kb
from data.config import DB_CONN, MAIN_CHAT_ID
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.mongodb import MongoDBJobStore
from pymongo import MongoClient
from utils.db.database import DBCommands
from load_all import bot

db = DBCommands()

MClient = MongoClient(DB_CONN)

jobstores = {
    'default': MongoDBJobStore(database="EK-CHAT-BOT", collection="apscheduler", client=MClient),
}

scheduler = AsyncIOScheduler(jobstores=jobstores, timezone="Europe/Moscow")

async def reset_limit():
    settings = await db.get_settings()
    await db.reset_rep_limits(settings['rep_reset_limit'])

async def reset_custom_limits():
    await db.reset_custom_limits()

def get_job(id):
    job = scheduler.get_job(id)
    return job

def get_next_run_time(id):
    next_run_time = get_job(id).next_run_time
    return next_run_time

def add_prize_job(function):
    scheduler.add_job(function, trigger='cron', hour=20, id="prize_job", replace_existing=True, misfire_grace_time=60*60*12)

async def remind_rep():
    msg = ("ü•á –í –Ω–∞—à–µ–º –ß–∞—Ç–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –†–µ–ø—É—Ç–∞—Ü–∏–∏.\n\n"
        "üìù –ü–∏—à–∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏ –µ—Å–ª–∏ –æ–Ω –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Ç—ã –ø–æ–ª—É—á–∏—à—å –æ—Ç –Ω–∏—Ö –±–∞–ª–ª—ã.\n\n"
        "üèÜ –ó–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –†–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
        "üßæ –ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π –≤ –£—Å–ª–æ–≤–∏—è—Ö:")
    await bot.send_message(MAIN_CHAT_ID, msg, reply_markup=await to_bot_kb())

async def remind_prize():
    prize = (await db.get_settings()).get('prize')
    msg = (f"üí∞ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ {prize} USDT —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ß–∞—Ç–∞!\n\n"
        "ü§ñ –£—á–∞—Å—Ç–≤—É–π, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–†–æ–∑—ã–≥—Ä—ã—à¬ª!")
    await bot.send_message(MAIN_CHAT_ID, msg, reply_markup=await to_bot_kb())


async def start_apscheduler():
    scheduler.start()
    

# scheduler.add_job(reset_custom_limits, trigger='cron', hour=00, id="reset_custom_limits", replace_existing=True, misfire_grace_time=60*60*12)
# scheduler.add_job(reset_limit, trigger='cron', hour=00, id="reset_reputation", replace_existing=True, misfire_grace_time=60*60*12)
# scheduler.add_job(remind_rep, trigger='cron', hour=13, id="remind_rep", replace_existing=True, misfire_grace_time=60*60*12)
# scheduler.add_job(remind_prize, trigger='cron', hour=18, id="remind_prize", replace_existing=True, misfire_grace_time=60*60*12)